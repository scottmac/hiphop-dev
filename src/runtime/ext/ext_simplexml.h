/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXT_SIMPLEXML_H__
#define __EXT_SIMPLEXML_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<
#include <runtime/ext/ext_simplexml_include.h>

#include <runtime/base/base_includes.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

Variant f_simplexml_load_string(CStrRef data, CStrRef class_name = "SimpleXMLElement", int64 options = 0, CStrRef ns = "", bool is_prefix = false);
Variant f_simplexml_load_file(CStrRef filename, CStrRef class_name = "SimpleXMLElement", int64 options = 0, CStrRef ns = "", bool is_prefix = false);
Variant f_libxml_get_errors();
Variant f_libxml_get_last_error();
void f_libxml_clear_errors();
bool f_libxml_use_internal_errors(CVarRef use_errors = null_variant);
void f_libxml_set_streams_context(CObjRef streams_context);

///////////////////////////////////////////////////////////////////////////////
// class SimpleXMLElement

FORWARD_DECLARE_CLASS(simplexmlelement);
class c_simplexmlelement : public ExtObjectData {
 public:
  BEGIN_CLASS_MAP(simplexmlelement)
  PARENT_CLASS(arrayaccess)
  END_CLASS_MAP(simplexmlelement)
  DECLARE_CLASS(simplexmlelement, SimpleXMLElement, ObjectData)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_simplexmlelement();
  public: ~c_simplexmlelement();
  public: void t___construct(CStrRef data, int64 options = 0, bool data_is_url = false, CStrRef ns = "", bool is_prefix = false);
  public: bool t_offsetexists(CVarRef index);
  public: Variant t_offsetget(CVarRef index);
  public: void t_offsetset(CVarRef index, CVarRef newvalue);
  public: void t_offsetunset(CVarRef index);
  public: Variant t_xpath(CStrRef path);
  public: bool t_registerxpathnamespace(CStrRef prefix, CStrRef ns);
  public: Variant t_asxml(CStrRef filename = "");
  public: Array t_getnamespaces(bool recursive = false);
  public: Array t_getdocnamespaces(bool recursive = false);
  public: Object t_children(CStrRef ns = "", bool is_prefix = false);
  public: String t_getname();
  public: Object t_attributes(CStrRef ns = "", bool is_prefix = false);
  public: Variant t_addchild(CStrRef qname, CStrRef value = null_string, CStrRef ns = null_string);
  public: void t_addattribute(CStrRef qname, CStrRef value = null_string, CStrRef ns = null_string);
  public: String t___tostring();
  public: Variant t___get(Variant name);
  public: Variant doGet(Variant v_name, bool error);
  public: Variant t___set(Variant name, Variant value);
  public: Variant t___unset(Variant name);
  public: Variant t___destruct();

  // implemented by HPHP
  public: c_simplexmlelement *create(String data, int64 options = 0, bool data_is_url = false, String ns = "", bool is_prefix = false);
  public: void dynConstruct(CArrRef Params);
  public: void dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *call);
  public: virtual void destruct();

 public:
  Object m_doc;
  xmlNodePtr m_node;
  Array m_children;
  Array m_attributes;
  bool m_is_text;
  virtual Array o_toArray() const;
  virtual Array o_toIterArray(const char *context, bool getRef = false);
  virtual Variant &___lval(Variant v_name);
 private:
  bool m_is_attribute;
  bool m_is_children;
  xmlXPathContextPtr m_xpath;
};

///////////////////////////////////////////////////////////////////////////////
// class LibXMLError

FORWARD_DECLARE_CLASS(libxmlerror);
class c_libxmlerror : public ExtObjectData {
 public:
  BEGIN_CLASS_MAP(libxmlerror)
  END_CLASS_MAP(libxmlerror)
  DECLARE_CLASS(libxmlerror, LibXMLError, ObjectData)
  DECLARE_INVOKES_FROM_EVAL
  ObjectData* dynCreate(CArrRef params, bool init = true);

  // need to implement
  public: c_libxmlerror();
  public: ~c_libxmlerror();
  public: void t___construct();
  public: Variant t___destruct();

  // implemented by HPHP
  public: c_libxmlerror *create();
  public: void dynConstruct(CArrRef Params);
  public: void dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *call);
  public: virtual void destruct();

};

///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXT_SIMPLEXML_H__
