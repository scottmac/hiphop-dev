<?php

require_once 'base.php';

p("#include <runtime/ext/pdo_driver.h>");

///////////////////////////////////////////////////////////////////////////////

f('pdo_drivers', StringVec);

c('PDO', null, array('Sweepable' => 'internal'),
  array(
    m(PublicMethod, '__construct', null,
      array('dsn' => String,
            'username' => array(String, 'null_string'),
            'password' => array(String, 'null_string'),
            'options' => array(VariantMap, 'null_array'))),
    m(PublicMethod, 'prepare', Variant,
      array('statement' => String,
            'options' => array(VariantMap, 'null_array'))),
    m(PublicMethod, 'beginTransaction', Boolean),
    m(PublicMethod, 'commit', Boolean),
    m(PublicMethod, 'rollBack', Boolean),
    m(PublicMethod, 'setAttribute', Boolean,
      array('attribute' => Int64,
            'value' => Variant)),
    m(PublicMethod, 'getAttribute', Variant,
      array('attribute' => Int64)),
    m(PublicMethod, 'exec', Variant,
      array('query' => String)),
    m(PublicMethod, 'lastInsertId', Variant,
      array('seqname' => array(String, 'null_string'))),
    m(PublicMethod, 'errorCode', Variant),
    m(PublicMethod, 'errorInfo', VariantVec),
    m(PublicMethod, 'query', Variant,
      array('sql' => String)),
    m(PublicMethod, 'quote', Variant,
      array('str' => String,
            'paramtype' => array(Int64, 'q_pdo_PARAM_STR'))),
    m(PublicMethod, '__wakeup', Variant),
    m(PublicMethod, '__sleep', Variant),
    m(PublicMethod, 'getAvailableDrivers', StringVec),
  ),
  array(
    ck("PARAM_BOOL",               Int64),
    ck("PARAM_NULL",               Int64),
    ck("PARAM_INT",                Int64),
    ck("PARAM_STR",                Int64),
    ck("PARAM_LOB",                Int64),
    ck("PARAM_STMT",               Int64),
    ck("PARAM_INPUT_OUTPUT",       Int64),
    ck("PARAM_EVT_ALLOC",          Int64),
    ck("PARAM_EVT_FREE",           Int64),
    ck("PARAM_EVT_EXEC_PRE",       Int64),
    ck("PARAM_EVT_EXEC_POST",      Int64),
    ck("PARAM_EVT_FETCH_PRE",      Int64),
    ck("PARAM_EVT_FETCH_POST",     Int64),
    ck("PARAM_EVT_NORMALIZE",      Int64),
    ck("FETCH_USE_DEFAULT",        Int64),
    ck("FETCH_LAZY",               Int64),
    ck("FETCH_ASSOC",              Int64),
    ck("FETCH_NUM",                Int64),
    ck("FETCH_BOTH",               Int64),
    ck("FETCH_OBJ",                Int64),
    ck("FETCH_BOUND",              Int64),
    ck("FETCH_COLUMN",             Int64),
    ck("FETCH_CLASS",              Int64),
    ck("FETCH_INTO",               Int64),
    ck("FETCH_FUNC",               Int64),
    ck("FETCH_GROUP",              Int64),
    ck("FETCH_UNIQUE",             Int64),
    ck("FETCH_KEY_PAIR",           Int64),
    ck("FETCH_CLASSTYPE",          Int64),
    ck("FETCH_SERIALIZE",          Int64),
    ck("FETCH_PROPS_LATE",         Int64),
    ck("FETCH_NAMED",              Int64),
    ck("ATTR_AUTOCOMMIT",          Int64),
    ck("ATTR_PREFETCH",            Int64),
    ck("ATTR_TIMEOUT",             Int64),
    ck("ATTR_ERRMODE",             Int64),
    ck("ATTR_SERVER_VERSION",      Int64),
    ck("ATTR_CLIENT_VERSION",      Int64),
    ck("ATTR_SERVER_INFO",         Int64),
    ck("ATTR_CONNECTION_STATUS",   Int64),
    ck("ATTR_CASE",                Int64),
    ck("ATTR_CURSOR_NAME",         Int64),
    ck("ATTR_CURSOR",              Int64),
    ck("ATTR_ORACLE_NULLS",        Int64),
    ck("ATTR_PERSISTENT",          Int64),
    ck("ATTR_STATEMENT_CLASS",     Int64),
    ck("ATTR_FETCH_TABLE_NAMES",   Int64),
    ck("ATTR_FETCH_CATALOG_NAMES", Int64),
    ck("ATTR_DRIVER_NAME",         Int64),
    ck("ATTR_STRINGIFY_FETCHES",   Int64),
    ck("ATTR_MAX_COLUMN_LEN",      Int64),
    ck("ATTR_EMULATE_PREPARES",    Int64),
    ck("ATTR_DEFAULT_FETCH_MODE",  Int64),
    ck("ERRMODE_SILENT",           Int64),
    ck("ERRMODE_WARNING",          Int64),
    ck("ERRMODE_EXCEPTION",        Int64),
    ck("CASE_NATURAL",             Int64),
    ck("CASE_LOWER",               Int64),
    ck("CASE_UPPER",               Int64),
    ck("NULL_NATURAL",             Int64),
    ck("NULL_EMPTY_STRING",        Int64),
    ck("NULL_TO_STRING",           Int64),
    ck("ERR_NONE",                 String),
    ck("FETCH_ORI_NEXT",           Int64),
    ck("FETCH_ORI_PRIOR",          Int64),
    ck("FETCH_ORI_FIRST",          Int64),
    ck("FETCH_ORI_LAST",           Int64),
    ck("FETCH_ORI_ABS",            Int64),
    ck("FETCH_ORI_REL",            Int64),
    ck("CURSOR_FWDONLY",           Int64),
    ck("CURSOR_SCROLL",            Int64),

    ck("MYSQL_ATTR_USE_BUFFERED_QUERY", Int64),
    ck("MYSQL_ATTR_LOCAL_INFILE",       Int64),
    ck("MYSQL_ATTR_MAX_BUFFER_SIZE",    Int64),
    ck("MYSQL_ATTR_INIT_COMMAND",       Int64),
    ck("MYSQL_ATTR_READ_DEFAULT_FILE",  Int64),
    ck("MYSQL_ATTR_READ_DEFAULT_GROUP", Int64),
    ck("MYSQL_ATTR_COMPRESS",           Int64),
    ck("MYSQL_ATTR_DIRECT_QUERY",       Int64),
    ck("MYSQL_ATTR_FOUND_ROWS",         Int64),
    ck("MYSQL_ATTR_IGNORE_SPACE",       Int64),

    ),
  "\n  public: sp_PDOConnection m_dbh;"
 );

c('PDOStatement', null, array('Sweepable' => 'internal'),
  array(
    m(PublicMethod, '__construct', null),
    m(PublicMethod, 'execute', Variant,
      array('params' => array(VariantMap, 'null_array'))),
    m(PublicMethod, 'fetch', Variant,
      array('how' => array(Int64, 'q_pdo_FETCH_USE_DEFAULT'),
            'orientation' => array(Int64, 'q_pdo_FETCH_ORI_NEXT'),
            'offset' => array(Int64, '0'))),
    m(PublicMethod, 'fetchObject', Variant,
      array('class_name' => array(String, 'null_string'),
            'ctor_args' => array(Variant, 'null'))),
    m(PublicMethod, 'fetchColumn', Variant,
      array('column_numner' => array(Int64, '0'))),
    m(PublicMethod, 'fetchAll', Variant,
      array('how' => array(Int64, 'q_pdo_FETCH_USE_DEFAULT'),
            'class_name' => array(Variant, 'null'),
            'ctor_args' => array(Variant, 'null'))),
    m(PublicMethod, 'bindValue', Boolean,
      array('paramno' => Variant,
            'param' => Variant,
            'type' => array(Int64, 'q_pdo_PARAM_STR'))),
    m(PublicMethod, 'bindParam', Boolean,
      array('paramno' => Variant,
            'param' => Variant | Reference,
            'type' => array(Int64, 'q_pdo_PARAM_STR'),
            'max_value_len' => array(Int64, '0'),
            'driver_params' => array(Variant, 'null'))),
    m(PublicMethod, 'bindColumn', Boolean,
      array('paramno' => Variant,
            'param' => Variant | Reference,
            'type' => array(Int64, 'q_pdo_PARAM_STR'),
            'max_value_len' => array(Int64, '0'),
            'driver_params' => array(Variant, 'null'))),
    m(PublicMethod, 'rowCount', Int64),
    m(PublicMethod, 'errorCode', Variant),
    m(PublicMethod, 'errorInfo', VariantVec),
    m(PublicMethod, 'setAttribute', Variant,
      array('attribute' => Int64,
            'value' => Variant)),
    m(PublicMethod, 'getAttribute', Variant,
      array('attribute' => Int64)),
    m(PublicMethod, 'columnCount', Int64),
    m(PublicMethod, 'getColumnMeta', Variant,
      array('column' => Int64)),
    m(PublicMethod, 'setFetchMode', Boolean,
      array('mode' => Int64), VariableArguments),
    m(PublicMethod, 'nextRowset', Boolean),
    m(PublicMethod, 'closeCursor', Boolean),
    m(PublicMethod, 'debugDumpParams', Variant),
    m(PublicMethod, '__wakeup', Variant),
    m(PublicMethod, '__sleep', Variant),
  ),
  array(),
  "\n  public: sp_PDOStatement m_stmt;"
 );

c('PDOException', 'exception', array(),
  array(m(PublicMethod, '__construct')));
