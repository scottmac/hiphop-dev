/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   | Copyright (c) 1997-2010 The PHP Group                                |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __EXTPROFILE_SESSION_H__
#define __EXTPROFILE_SESSION_H__

// >>>>>> Generated by idl.php. Do NOT modify. <<<<<<

#include <runtime/ext/ext_session.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

inline void x_session_set_cookie_params(int64 lifetime, CStrRef path = null_string, CStrRef domain = null_string, CVarRef secure = null, CVarRef httponly = null) {
  FUNCTION_INJECTION_BUILTIN(session_set_cookie_params);
  f_session_set_cookie_params(lifetime, path, domain, secure, httponly);
}

inline Array x_session_get_cookie_params() {
  FUNCTION_INJECTION_BUILTIN(session_get_cookie_params);
  return f_session_get_cookie_params();
}

inline String x_session_name(CStrRef newname = null_string) {
  FUNCTION_INJECTION_BUILTIN(session_name);
  return f_session_name(newname);
}

inline Variant x_session_module_name(CStrRef newname = null_string) {
  FUNCTION_INJECTION_BUILTIN(session_module_name);
  return f_session_module_name(newname);
}

inline bool x_session_set_save_handler(CStrRef open, CStrRef close, CStrRef read, CStrRef write, CStrRef destroy, CStrRef gc) {
  FUNCTION_INJECTION_BUILTIN(session_set_save_handler);
  return f_session_set_save_handler(open, close, read, write, destroy, gc);
}

inline String x_session_save_path(CStrRef newname = null_string) {
  FUNCTION_INJECTION_BUILTIN(session_save_path);
  return f_session_save_path(newname);
}

inline String x_session_id(CStrRef newid = null_string) {
  FUNCTION_INJECTION_BUILTIN(session_id);
  return f_session_id(newid);
}

inline bool x_session_regenerate_id(bool delete_old_session = false) {
  FUNCTION_INJECTION_BUILTIN(session_regenerate_id);
  return f_session_regenerate_id(delete_old_session);
}

inline String x_session_cache_limiter(CStrRef new_cache_limiter = null_string) {
  FUNCTION_INJECTION_BUILTIN(session_cache_limiter);
  return f_session_cache_limiter(new_cache_limiter);
}

inline int64 x_session_cache_expire(CStrRef new_cache_expire = null_string) {
  FUNCTION_INJECTION_BUILTIN(session_cache_expire);
  return f_session_cache_expire(new_cache_expire);
}

inline Variant x_session_encode() {
  FUNCTION_INJECTION_BUILTIN(session_encode);
  return f_session_encode();
}

inline bool x_session_decode(CStrRef data) {
  FUNCTION_INJECTION_BUILTIN(session_decode);
  return f_session_decode(data);
}

inline bool x_session_start() {
  FUNCTION_INJECTION_BUILTIN(session_start);
  return f_session_start();
}

inline bool x_session_destroy() {
  FUNCTION_INJECTION_BUILTIN(session_destroy);
  return f_session_destroy();
}

inline Variant x_session_unset() {
  FUNCTION_INJECTION_BUILTIN(session_unset);
  return f_session_unset();
}

inline void x_session_commit() {
  FUNCTION_INJECTION_BUILTIN(session_commit);
  f_session_commit();
}

inline void x_session_write_close() {
  FUNCTION_INJECTION_BUILTIN(session_write_close);
  f_session_write_close();
}

inline bool x_session_register(int _argc, CVarRef var_names, CArrRef _argv = null_array) {
  FUNCTION_INJECTION_BUILTIN(session_register);
  return f_session_register(_argc, var_names, _argv);
}

inline bool x_session_unregister(CStrRef varname) {
  FUNCTION_INJECTION_BUILTIN(session_unregister);
  return f_session_unregister(varname);
}

inline bool x_session_is_registered(CStrRef varname) {
  FUNCTION_INJECTION_BUILTIN(session_is_registered);
  return f_session_is_registered(varname);
}


///////////////////////////////////////////////////////////////////////////////
}

#endif // __EXTPROFILE_SESSION_H__
